<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="All_slots_must_be_approved" xml:space="preserve">
    <value>All slots must be approved</value>
    <comment>Alerts - Slots</comment>
  </data>
  <data name="All_slots_must_be_full" xml:space="preserve">
    <value>All slots must be full</value>
    <comment>Alerts - Slots</comment>
  </data>
  <data name="Approve_Crop" xml:space="preserve">
    <value>Approve Crop</value>
    <comment>Options Menu</comment>
  </data>
  <data name="Arrow_Text" xml:space="preserve">
    <value>If you are satisfied with your cropping job press the PDF button</value>
    <comment>Slots Panel - Arrow</comment>
  </data>
  <data name="before_closing" xml:space="preserve">
    <value>before closing?</value>
    <comment>Alerts - Save Pt. 2</comment>
  </data>
  <data name="Clear_Library" xml:space="preserve">
    <value>Clear Library</value>
    <comment>Options Menu</comment>
  </data>
  <data name="Clear_Slot" xml:space="preserve">
    <value>Clear Slot</value>
    <comment>Options Menu</comment>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
    <comment>Other</comment>
  </data>
  <data name="Create_PDF" xml:space="preserve">
    <value>Create PDF</value>
    <comment>File Menu</comment>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Exit</value>
    <comment>File Menu</comment>
  </data>
  <data name="File" xml:space="preserve">
    <value>File</value>
    <comment>File Menu</comment>
  </data>
  <data name="Import_Images" xml:space="preserve">
    <value>Import Images</value>
    <comment>File Menu</comment>
  </data>
  <data name="New" xml:space="preserve">
    <value>New</value>
    <comment>File Menu</comment>
  </data>
  <data name="Next_Slot" xml:space="preserve">
    <value>Next Slot</value>
    <comment>Options Menu</comment>
  </data>
  <data name="Open" xml:space="preserve">
    <value>Open</value>
    <comment>File Menu</comment>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Options</value>
    <comment>Options Menu</comment>
  </data>
  <data name="Previous_Slot" xml:space="preserve">
    <value>Previous Slot</value>
    <comment>Options Menu</comment>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
    <comment>File Menu</comment>
  </data>
  <data name="Save_As" xml:space="preserve">
    <value>Save As</value>
    <comment>File Menu</comment>
  </data>
  <data name="Save_changes_to_document" xml:space="preserve">
    <value>Save changes to document</value>
    <comment>Alerts - Save Pt. 1</comment>
  </data>
  <data name="Slot" xml:space="preserve">
    <value>Slot</value>
    <comment>Slots Panel - Slots</comment>
  </data>
  <data name="Some_images_could_not_be_found" xml:space="preserve">
    <value>Some imags could not be found</value>
    <comment>Alerts - Images</comment>
  </data>
  <data name="Untitled" xml:space="preserve">
    <value>Untitled</value>
    <comment>Other</comment>
  </data>
  <data name="User_Guide" xml:space="preserve">
    <value>
User's Guide:

1. Import Images to the image library using the 'Import Images...' button.
2. Crop the image using the crop tool that will appear at the center of the image.
3. Approve your crop by clicking the 'V' button, and begin cropping the next image.
4. When you are done, simply click the 'Create PDF' button to save a pdf document containing the domino sheet.
5. When sending the file to be printed: MAKE SURE THAT "fit to frame" IS TICKED OFF or at page sizing "actual size"  is TICKED ON.</value>
    <comment>User's Guide</comment>
  </data>
  <data name="Creating_PDF" xml:space="preserve">
    <value>Creating PDF...</value>
    <comment>Progress Bar Form</comment>
  </data>
  <data name="Finished" xml:space="preserve">
    <value>Finished</value>
    <comment>Progress Bar Form</comment>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
    <comment>Other</comment>
  </data>
  <data name="Open_PDF_Folder" xml:space="preserve">
    <value>Open PDF Folder</value>
    <comment>Progress Bar Form</comment>
  </data>
  <data name="Open_PDF" xml:space="preserve">
    <value>Open PDF</value>
    <comment>Progress Bar Form</comment>
  </data>
</root>